@page "/collections"
@inject HttpClient http

<PageTitle>In Touch - Collections</PageTitle>

<section class="hero is-primary is-small">
  <div class="hero-body">
    <div class="container">
      <p class="title">Collections</p>
    </div>
  </div>
  <div class="hero-foot">
    <div class="container">
      <MainNavbar />
    </div>
  </div>
</section>
<br />

<div class="container">
  <div class="level mt-4">
    <div class="level-left">&nbsp;</div>
    <div class="level-right"> <button type="button" class="button is-outlined" @onclick="ToggleAddCollection">+ Add
        Collection</button></div>
  </div>

  <div class="mt-4" hidden="@(!_showAddCollection)">
    <CollectionDetailForm HasSaved="CollectionDetailSavedHandler" HasCancelled="CollectionDetailCancelledHandler"
      EditingCollection="TargetCollection">
    </CollectionDetailForm>
  </div>

  <table class="table is-fullwidth">
    <tr>
      <th></th>
      <th>Name</th>
      <th>Description</th>
    </tr>
    @if (_isLoadingCollections)
    {
      <tr>
        <td colspan="5">Loading..</td>
      </tr>
    }
    @foreach (var collection in _collections)
    {
      <tr>
        <td>@*<a @onclick="(()=>ShowDetail(collection.Id)">Details</a>*@
          <a @onclick="(()=>OnDelete(collection.Id))">Delete</a>
        </td>
        <td>@collection.Name</td>
        <td>
          <TableTextDisplay FullText="@collection.Description" />
        </td>
      </tr>
    }
  </table>
</div>

<PromptDialog Show="_showDeleteConfirmation" OnApprove="@(()=>PerformDelete(TargetCollection.Id))"
  OnDecline="CancelDelete">
  <p>Do you really want to delete this collection?
    <strong>@TargetCollection.Name</strong>
  </p>
  <p>You will lose access to any contacts in this collection.</p>
</PromptDialog>


@code {
  [CascadingParameter]
  public string ApiBaseUrl { get; set; } = "";
  public CollectionDto TargetCollection { get; set; } = new CollectionDto();
  private IEnumerable<CollectionDto> _collections = new List<CollectionDto>();
  private bool _showAddCollection = false;
  private bool _isLoadingCollections = false;
  private bool _showDeleteConfirmation = false;

  protected override async Task OnInitializedAsync()
  {
    await LoadAllCollections();
  }

  public async Task LoadAllCollections()
  {
    _isLoadingCollections = true;
    try
    {
      _collections = await http.GetFromJsonAsync<IEnumerable<CollectionDto>>($"{ApiBaseUrl}collections")
      ?? new List<CollectionDto>();
    }
    catch (Exception ex)
    {
      Console.WriteLine($"Error loading all collections. {ex.FriendlyMessage()}");
    }
    finally
    {
      _isLoadingCollections = false;
    }
  }

  public void ToggleAddCollection()
  {
    _showAddCollection = !_showAddCollection;
    if (_showAddCollection == false)
    {
      TargetCollection = new CollectionDto();
    }
  }

  public async Task CollectionDetailSavedHandler(bool success)
  {
    if (success)
    {
      _showAddCollection = false;
      await LoadAllCollections();
    }
    else
    {
      // TODO toast
      Console.WriteLine("Failed to save the collection.");
    }
  }

  public void CollectionDetailCancelledHandler()
  {
    _showAddCollection = false;
  }

  public void OnDelete(int id)
  {
    _showAddCollection = false;
    TargetCollection = _collections.Single(x => x.Id == id);
    _showDeleteConfirmation = true;
    Console.WriteLine($"[CollectionsPage] Delete was clicked for {id}.");
  }

  public void CancelDelete()
  {
    _showDeleteConfirmation = false;
    Console.WriteLine($"[CollectionsPage] Delete was cancelled.");
  }

  public async Task PerformDelete(int id)
  {
    Console.WriteLine($"[CollectionsPage] Performing delete of {id}");
    try
    {
      var response = await http.DeleteAsync($"{ApiBaseUrl}collections/{id}");
      if (response.IsSuccessStatusCode)
      {
        await LoadAllCollections();
      }
    }
    catch (Exception ex)
    {
      Console.WriteLine($"Error deleting contact {id}. {ex.FriendlyMessage()}");
    }
    finally
    {
      _showDeleteConfirmation = false;
    }
  }
}