@inject HttpClient http

<div class="card">
  <div class="card-content" hidden="@(!_showSavingMessage)">
    Saving...
  </div>
  <div class="card-content" hidden="@(_showSavingMessage)">
    <div class="field">
      <label class="label">Name</label>
      <div class="control">
        <input class="input" @bind="EditingCollection.Name" type="text" placeholder="Name of collection">
      </div>
      <p class="help is-danger" hidden="@(!_showNameHelp)">Name of collection is required.</p>
    </div>

    <div class="field">
      <label class="label">Description</label>
      <div class="control">
        <textarea class="textarea" @bind="EditingCollection.Description"
          placeholder="What is your relationship?"></textarea>
      </div>
    </div>

    <div class="field" hidden="@(EditingCollection.Id == 0)">
      <label class="label">Created</label>
      <div class="control">
        <input type="date" class="input" @bind="EditingCollection.Created" disabled></input>
      </div>
    </div>

    <div class="field" hidden="@(EditingCollection.Id == 0)">
      <label class="label">Modified</label>
      <div class="control">
        <input type="date" class="input" @bind="EditingCollection.Modified" disabled></input>
      </div>
    </div>
  </div>

  <div class="card-footer" hidden="@(_showSavingMessage)">
    <a @onclick="OnSave" class="card-footer-item">Save</a>
    <a @onclick="OnCancel" class="card-footer-item">Cancel</a>
  </div>
</div>



@code {
  [CascadingParameter]
  public string ApiBaseUrl { get; set; } = "";

  [Parameter]
  public EventCallback<bool> HasSaved { get; set; }

  [Parameter]
  public EventCallback HasCancelled { get; set; }

  [Parameter]
  public CollectionDto EditingCollection { get; set; } = new CollectionDto();

  private bool _showNameHelp = false;
  private bool _showSavingMessage = false;

  private async Task OnCancel()
  {
    await HasCancelled.InvokeAsync();
  }

  private async Task OnSave()
  {
    if (!IsValid())
    {
      return;
    }
    _showSavingMessage = true;
    bool success = false;

    if (EditingCollection.Id == 0)
    {
      success = await PostNewCollection();
    }
    else
    {
      success = await PutCollectionChange();
    }

    _showSavingMessage = false;
    await HasSaved.InvokeAsync(success);
  }

  private bool IsValid()
  {
    if (String.IsNullOrWhiteSpace("Name"))
    {
      _showNameHelp = true;
    }
    else
    {
      _showNameHelp = false;
    }

    return !_showNameHelp;
  }


  public async Task<bool> PostNewCollection()
  {
    try
    {
      var response = await http.PostAsJsonAsync($"{ApiBaseUrl}collections", EditingCollection);
      var result = await response.Content.ReadFromJsonAsync<CollectionDto>();
      return true;
    }
    catch (Exception ex)
    {
      // TODO toast
      Console.WriteLine($"[CollectionDetailForm] Failed to create new collection! {ex.FriendlyMessage()}");
      return false;
    }
  }

  public async Task<bool> PutCollectionChange()
  {
    try
    {
      var response = await http.PutAsJsonAsync($"{ApiBaseUrl}collections/{EditingCollection.Id}", EditingCollection);
      var result = await response.Content.ReadFromJsonAsync<CollectionDto>();
      return true;
    }
    catch (Exception ex)
    {
      Console.WriteLine($"ERROR: {ex.ToString()}");
      return false;
    }
  }
}