@page "/contacts"
@inject HttpClient http

<PageTitle>In Touch - Contacts</PageTitle>

<section class="hero is-primary is-small">
  <div class="hero-body">
    <div class="container">
      <p class="title">Contacts</p>
    </div>
  </div>
  <div class="hero-foot">
    <div class="container">
      <MainNavbar />
    </div>
  </div>
</section>
<br />

<div class="container">
  <div class="field">
    <label class="label">Collection</label>
    <p class="control has-icons-left">
      <span class="select">
        <select @onchange="OnChangeSelectedCollection">
          <option>Everything</option>
          @foreach (var collection in _collections)
          {
            <option value="@collection.Id">@collection.Name</option>
          }
        </select>
      </span>
      <span class="icon is-small is-left">
        <i class="fas fa-filter"></i>
      </span>
    </p>
    @if (_isLoadingCollections)
    {
      <p class="help is-info" hidden="">Loading collections...</p>
    }
  </div>

  <div class="level mt-4">
    <div class="level-left">&nbsp;</div>
    <div class="level-right"> <button type="button" class="button is-outlined" @onclick="ToggleAddContact">+ Add
        Contact</button></div>
  </div>

  <div class="mt-4" hidden="@(!_showAddContact)">
    <ContactDetailForm HasSaved="ContactDetailSavedHandler" HasCancelled="ContactDetailCancelledHandler"
      TargetContact="@EditingContact" DefaultCollectionId="_selectedCollectionId">
    </ContactDetailForm>
  </div>

  <table class="table is-fullwidth">
    <tr>
      <th></th>
      <th>Name</th>
      <th>Description</th>
    </tr>
    @if (_isLoadingContacts)
    {
      <tr>
        <td colspan="3">Loading..</td>
      </tr>
    }
    @foreach (var contact in _filteredContacts)
    {
      <tr>
        <td><a href="/contacts/@contact.Id"><i class="fas fa-arrow-up-right-from-square"></i>Details</a></td>
        <td>@contact.Name</td>
        <td>
          <TableTextDisplay FullText="@contact.Description" />
        </td>
      </tr>
    }
  </table>
</div>

@code {
  [CascadingParameter]
  public string ApiBaseUrl { get; set; } = "";
  private int? _selectedCollectionId = null;
  private ContactDto EditingContact { get; set; } = new ContactDto();
  private IEnumerable<ContactDto> _contacts = new List<ContactDto>();
  private IEnumerable<ContactDto> _filteredContacts = new List<ContactDto>();
  private IEnumerable<CollectionDto> _collections = new List<CollectionDto>();
  private bool _showAddContact = false;
  private bool _isLoadingContacts = false;
  private bool _isLoadingCollections = false;


  protected override async Task OnInitializedAsync()
  {
    _collections = await LoadAllCollections();
    _contacts = await LoadAllContacts();

    // on page load there's no filter applied
    _filteredContacts = _contacts;
  }

  public async Task<IEnumerable<CollectionDto>> LoadAllCollections()
  {
    _isLoadingCollections = true;
    IEnumerable<CollectionDto> collections = new List<CollectionDto>();
    try
    {
      collections = await http.GetFromJsonAsync<IEnumerable<CollectionDto>>($"{ApiBaseUrl}collections")
      ?? new List<CollectionDto>();
    }
    catch (Exception ex)
    {
      // TODO toast
      Console.WriteLine($"Error loading all collections. {ex.FriendlyMessage()}");
    }
    finally
    {
      _isLoadingCollections = false;
    }

    return collections;
  }

  public async Task<IEnumerable<ContactDto>> LoadAllContacts()
  {
    IEnumerable<ContactDto> contacts = new List<ContactDto>();
    _isLoadingContacts = true;
    try
    {
      contacts = await http.GetFromJsonAsync<IEnumerable<ContactDto>>($"{ApiBaseUrl}contacts")
      ?? new List<ContactDto>();
    }
    catch (Exception ex)
    {
      // TODO toast
      Console.WriteLine($"Error loading all contacts. {ex.FriendlyMessage()}");
    }
    finally
    {
      _isLoadingContacts = false;
    }

    return contacts;
  }

  public void ToggleAddContact()
  {
    _showAddContact = !_showAddContact;
    if (_showAddContact == false)
    {
      EditingContact = new ContactDto();
    }
  }

  public async Task ContactDetailSavedHandler(bool success)
  {
    if (success)
    {
      _showAddContact = false;
      _contacts = await LoadAllContacts();
      // update the filter in case we need to display a new contact
      _filteredContacts = FilterContactsByCollection(_selectedCollectionId, _contacts);
    }
    else
    {
      // TODO toast
      Console.WriteLine("[ContactDetailForm] Failed to save the contact.");
    }
  }

  public void ContactDetailCancelledHandler()
  {
    ToggleAddContact();
  }

  public void OnChangeSelectedCollection(ChangeEventArgs eventArgs)
  {
    Console.WriteLine($"[OnChangeSelectedCollection] Value = {eventArgs.Value}");
    int selectedVal;
    Int32.TryParse(eventArgs.Value?.ToString(), out selectedVal);
    _selectedCollectionId = selectedVal;
    _filteredContacts = FilterContactsByCollection(_selectedCollectionId, _contacts);
  }

  public IEnumerable<ContactDto> FilterContactsByCollection(int? collectionId, IEnumerable<ContactDto> contacts)
  {
    if (collectionId == null || collectionId == 0)
      return contacts;
    else
      return contacts.Where(x => x.CollectionId == collectionId);
  }
}