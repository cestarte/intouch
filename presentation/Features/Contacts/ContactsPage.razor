@page "/contacts"
@inject HttpClient http

<PageTitle>In Touch - Contacts</PageTitle>

<section class="hero is-primary is-small">
  <div class="hero-body">
    <div class="container">
      <p class="title">Contacts</p>
    </div>
  </div>
  <div class="hero-foot">
    <div class="container">
      <MainNavbar />
    </div>
  </div>
</section>
<br />

<div class="container">
  <div class="level mt-4">
    <div class="level-left">&nbsp;</div>
    <div class="level-right"> <button type="button" class="button is-outlined" @onclick="ToggleAddContact">+ Add
        Contact</button></div>
  </div>

  <div class="mt-4" hidden="@(!_showAddContact)">
    <ContactDetailForm HasSaved="ContactDetailSavedHandler" HasCancelled="ContactDetailCancelledHandler"
      Description="@EditingDescription" Name="@EditingName" Id="@EditingContactId" Created="@EditingCreated"
      Modified="@EditingModified">
    </ContactDetailForm>
  </div>

  <table class="table is-fullwidth">
    <tr>
      <th></th>
      <th>Name</th>
      <th>Description</th>
    </tr>
    @if (_isLoadingContacts)
    {
      <tr>
        <td colspan="5">Loading..</td>
      </tr>
    }
    @foreach (var contact in _contacts)
    {
      <tr>
        <td><a href="/contacts/@contact.Id">Details</a></td>
        <td>@contact.Name</td>
        <td>@contact.Description</td>
      </tr>
    }
  </table>
</div>

@code {
  [CascadingParameter]
  public string ApiBaseUrl { get; set; } = "";
  public string EditingDescription { get; set; } = "";
  public DateTime EditingCreated { get; set; }
  public DateTime EditingModified { get; set; }
  public string EditingName { get; set; } = "";
  public int EditingContactId { get; set; } = 0;
  private IEnumerable<ContactDto> _contacts = new List<ContactDto>();
  private bool _showAddContact = false;
  private bool _isLoadingContacts = false;

  protected override async Task OnInitializedAsync()
  {
    await LoadAllContacts();
  }

  public async Task LoadAllContacts()
  {
    _isLoadingContacts = true;
    try
    {
      _contacts = await http.GetFromJsonAsync<IEnumerable<ContactDto>>($"{ApiBaseUrl}contacts")
      ?? new List<ContactDto>();
    }
    catch (HttpRequestException ex)
    {
      Console.WriteLine($"Error loading all contacts. {ex.FriendlyMessage()}");
    }
    catch (Exception ex)
    {
      Console.WriteLine($"Error loading all contacts. {ex.FriendlyMessage()}");
    }
    finally
    {
      _isLoadingContacts = false;
    }
  }

  public void ToggleAddContact()
  {
    _showAddContact = !_showAddContact;
    if (_showAddContact == false)
    {
      EditingDescription = "";
      EditingName = "";
      EditingContactId = 0;
    }
  }

  public async Task ContactDetailSavedHandler(bool success)
  {
    if (success)
    {
      _showAddContact = false;
      await LoadAllContacts();
    }
    else
    {
      // TODO
      Console.WriteLine("Failed to save the contact.");
    }
  }

  public void ContactDetailCancelledHandler()
  {
    _showAddContact = false;
  }
}