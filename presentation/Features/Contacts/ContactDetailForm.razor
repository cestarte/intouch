@inject HttpClient http

<div class="card">
  <div class="card-content" hidden="@(!_showSavingMessage)">
    Saving...
  </div>
  <div class="card-content" hidden="@(_showSavingMessage)">
    <div class="field">
      <label class="label">Name</label>
      <div class="control">
        <input class="input" @bind="TargetContact.Name" type="text" placeholder="Name of contact">
      </div>
      <p class="help is-danger">Name of a business or individual is required.</p>
    </div>

    <div class="field">
      <label class="label">Description</label>
      <div class="control">
        <textarea class="textarea" @bind="TargetContact.Description"
          placeholder="What is your relationship?"></textarea>
      </div>
    </div>

    <div class="field">
      <label class="label">Collection</label>
      <p class="control">
        <span class="select">
          <select @bind="TargetContact.CollectionId">
            @foreach (var collection in _collections)
            {
              if (DefaultCollectionId != null && collection.Id == DefaultCollectionId)
              {
                <option value="@collection.Id" selected>@collection.Name</option>
              }
              else
              {
                <option value="@collection.Id">@collection.Name</option>
              }
            }
          </select>
        </span>
      </p>
    </div>

    <div class="field" hidden="@(TargetContact.Id == 0)">
      <label class="label">Created</label>
      <div class="control">
        <input type="date" class="input" @bind="TargetContact.Created" disabled></input>
      </div>
    </div>

    <div class="field" hidden="@(TargetContact.Id == 0)">
      <label class="label">Modified</label>
      <div class="control">
        <input type="date" class="input" @bind="TargetContact.Modified" disabled></input>
      </div>
    </div>
  </div>

  <div class="card-footer" hidden="@(_showSavingMessage)">
    <a @onclick="OnSave" class="card-footer-item">Save</a>
    <a @onclick="OnCancel" class="card-footer-item">Cancel</a>
  </div>
</div>



@code {
  [CascadingParameter]
  public string ApiBaseUrl { get; set; } = "";

  [Parameter]
  public ContactDto TargetContact { get; set; } = new ContactDto();

  [Parameter]
  public EventCallback<bool> HasSaved { get; set; }

  [Parameter]
  public EventCallback HasCancelled { get; set; }

  [Parameter]
  public int? DefaultCollectionId { get; set; }
  private IEnumerable<CollectionDto> _collections = new List<CollectionDto>();


  private bool _showSavingMessage = false;

  private async Task OnCancel()
  {
    await HasCancelled.InvokeAsync();
  }

  protected override async Task OnInitializedAsync()
  {
    _collections = await LoadAllCollections();
  }

  public async Task<IEnumerable<CollectionDto>> LoadAllCollections()
  {
    IEnumerable<CollectionDto> collections = new List<CollectionDto>();
    try
    {
      collections = await http.GetFromJsonAsync<IEnumerable<CollectionDto>>($"{ApiBaseUrl}collections")
      ?? new List<CollectionDto>();
    }
    catch (Exception ex)
    {
      // TODO toast
      Console.WriteLine($"[ContactDetailForm] Error loading all collections. {ex.FriendlyMessage()}");
    }

    return collections;
  }

  private async Task OnSave()
  {
    if (!IsValid())
    {
      return;
    }
    _showSavingMessage = true;
    bool success = false;

    if (TargetContact.Id == 0)
    {
      success = await PostNewContact();
    }
    else
    {
      success = await PutContactChange();
    }

    _showSavingMessage = false;
    await HasSaved.InvokeAsync(success);
  }

  private bool IsValid()
  {
    bool isValid = true;
    if (String.IsNullOrWhiteSpace(TargetContact.Name))
    {
      Console.WriteLine("[IsValid] Name is required");
      isValid = false;
    }

    if (TargetContact.CollectionId <= 0)
    {
      Console.WriteLine("[IsValid] Collection is required.");
      isValid = false;
    }

    return isValid;
  }


  public async Task<bool> PostNewContact()
  {
    try
    {
      var response = await http.PostAsJsonAsync($"{ApiBaseUrl}contacts", TargetContact);
      var result = await response.Content.ReadFromJsonAsync<ContactDto>();
      return true;
    }
    catch (Exception ex)
    {
      // TODO toast
      Console.WriteLine($"[ContactDetailForm] Failed to create contact. {ex.FriendlyMessage()}");
      return false;
    }
  }

  public async Task<bool> PutContactChange()
  {
    try
    {
      var response = await http.PutAsJsonAsync($"{ApiBaseUrl}contacts/{TargetContact.Id}", TargetContact);
      var result = await response.Content.ReadFromJsonAsync<ContactDto>();
      return true;
    }
    catch (Exception ex)
    {
      Console.WriteLine($"[ContactDetailForm] Failed to update contact {TargetContact.Id}: {ex.FriendlyMessage()}");
      return false;
    }
  }
}